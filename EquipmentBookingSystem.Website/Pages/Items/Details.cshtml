@page "{id:guid}"
@using Humanizer
@model EquipmentBookingSystem.Website.Pages.Items.DetailsModel

@{
    ViewData["Title"] = "Details";
    var nbsp = Html.Raw("&nbsp;");
}

<h1>Details</h1>

<div>
    <h4>Item</h4>
    <hr/>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Item.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Item.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Item.Identifiers)
        </dt>
        <dd class="col-sm-10">
            @if (Model.Item.Identifiers.Any())
            {
                <ul>
                    @foreach (var identifier in Model.Item.Identifiers)
                    {
                        <li>
                            <span>@Html.DisplayFor(model => identifier.Type)</span>:
                            <code>@Html.DisplayFor(model => identifier.Value)</code>
                            <small>
                                (
                                <span>@Html.DisplayFor(model => identifier.From)</span>
                                -
                                <span>@Html.DisplayFor(model => identifier.To)</span>
                                )
                            </small>
                        </li>
                    }
                </ul>

                @* <dl class="row"> *@
                @*     @foreach (var identifier in Model.Item.Identifiers) *@
                @*     { *@
                @*         <dt class="col-2"> *@
                @*             @Html.DisplayFor(model => identifier.Type) *@
                @*         </dt> *@
                @*         <dd class="col-9"> *@
                @*             <code>@Html.DisplayFor(model => identifier.Value)</code> *@
                @*             <small> *@
                @*                 ( *@
                @*                 <span>@Html.DisplayFor(model => identifier.From)</span> *@
                @*                 - *@
                @*                 <span>@Html.DisplayFor(model => identifier.To)</span> *@
                @*                 ) *@
                @*             </small> *@
                @*         </dd> *@
                @*     } *@
                @* </dl> *@
            }
            else
            {
                <span>No identifiers</span>
            }
            @* @Html.DisplayFor(model => model.Item.Identifiers) *@
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Item.Manufacturer)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Item.Manufacturer)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Item.Model)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Item.Model)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Item.CreatedDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Item.CreatedDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Item.UpdatedDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Item.UpdatedDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Item.CreatedBy)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Item.CreatedBy)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Item.UpdatedBy)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Item.UpdatedBy)
        </dd>
    </dl>
</div>
<div>
    <a asp-page="./Edit" asp-route-id="@Model.Item.Id">Edit</a> |
    <a asp-page="./Index">Back to List</a>
</div>

<br/>
<br/>
<br/>

<div class="row">
    <div class="col-12">
        <h4>Bookings</h4>
        <hr/>
        @if (Model.Item.Bookings.Any())
        {
            <div class="row">
                <div class="col-12">
                    <ol>
                        @foreach (var booking in Model.Item.Bookings.OrderBy(i => i.BookingStart))
                        {
                            // duration
                            var duration = booking.BookingEnd - booking.BookingStart;

                            <li>
                                @Html.DisplayFor(model => booking.BookingStart) - @Html.DisplayFor(model => booking.BookingEnd)
                                for @Html.DisplayFor(model => booking.BookedFor)
                                <small>(approx. @duration.Humanize(2))</small>
                                -
                                <a asp-area="" asp-page="/Bookings/Details" asp-route-id="@booking.Id">view</a>
                            </li>
                        }
                    </ol>
                </div>
            </div>
            <div class="row">
                <div class="col-12">

                    @{
                        // Determine the earliest start and latest end across event and booking
                        var earliestStart = Model.Item.Bookings.Select(b => b.EventStart).Min();
                        var latestEnd = Model.Item.Bookings.Select(b => b.EventEnd).Max();

                        // Calculate total days between earliest start and latest end
                        var span = latestEnd.Date - earliestStart.Date;
                        var totalDays = span.Days;

                        // Set the minutes per column
                        var minutesPerColumn = 15;
                        var columnsPerHour = 60 / minutesPerColumn;
                        var totalColumns = 24 * columnsPerHour;

                        var hourWidth = columnsPerHour + "em";

                        // Loop through each day
                        for (var dayIndex = 0; dayIndex <= totalDays; dayIndex++)
                        {
                            var currentDay = earliestStart.Date.AddDays(dayIndex);

                            <table style="font-size: small; border-collapse: collapse;">
                                <tr>
                                    <th style="text-align: right; white-space: nowrap; width: 10em;">
                                        @currentDay.ToString("ddd dd/MM/yyyy")
                                        <br/>
                                        (<small>@currentDay.Humanize()</small>)
                                    </th>
                                    @for (var i = 0; i < totalColumns; i += columnsPerHour)
                                    {
                                        <th colspan="@columnsPerHour"
                                            style="width:@hourWidth; text-align: left; border:1px solid rgba(128,128,128,0.6);">
                                            @(("" + (i / columnsPerHour)).PadLeft(2, '0')):00
                                        </th>
                                    }
                                </tr>
                                <tr>
                                    <td style="text-align: right; white-space: nowrap;">Booking</td>
                                    @for (var i = 0; i < totalColumns; i++)
                                    {
                                        // if current time covers any booking time, highlight the cell
                                        var isInBooking = Model.Item.Bookings.Any(b => b.BookingStart < currentDay.AddMinutes((i + 1) * minutesPerColumn) && b.BookingEnd > currentDay.AddMinutes((i) * minutesPerColumn));
                                        <td style="border:1px solid rgba(192,192,192,0.6); @(isInBooking ? "background-color: lightgreen" : "")">@nbsp</td>
                                    }
                                </tr>
                                <tr>
                                    <td style="text-align: right; white-space: nowrap;">Event</td>
                                    @for (var i = 0; i < totalColumns; i++)
                                    {
                                        // if current time covers any event time, highlight the cell
                                        var isInEvent = Model.Item.Bookings.Any(b => b.EventStart < currentDay.AddMinutes((i + 1) * minutesPerColumn) && b.EventEnd > currentDay.AddMinutes((i) * minutesPerColumn));
                                        <td style="border:1px solid rgba(192,192,192,0.6); @(isInEvent ? "background-color: lightblue" : "")">@nbsp</td>
                                    }
                                </tr>
                            </table>
                        }
                    }
                </div>
            </div>
        }
        else
        {
            <span>No items</span>
        }
    </div>
</div>

<br/>
<br/>

<div class="row">
    <div class="col-12">
        <h4>Audit Changes</h4>
        <hr/>
        <table class="table">
            <thead>
            <tr>
                <th>
                    Property
                </th>
                <th>
                    Old Value
                </th>
                <th>
                    New Value
                </th>
                <th>
                    Changed By
                </th>
                <th>
                    Timestamp (UTC)
                </th>
            </tr>
            </thead>
            <tbody>
            @if (Model.Changes.Any())
            {
                @foreach (var audit in Model.Changes.OrderByDescending(a => a.ChangeTimeUtc))
                {
                    <tr>
                        <td>
                            @audit.PropertyName
                        </td>
                        <td>
                            @if (audit.OldValue is null)
                            {
                                <text>No value (null)</text>
                            }
                            else if (string.Empty.Equals(audit.OldValue))
                            {
                                <text>No value (empty)</text>
                            }
                            else
                            {
                                @audit.OldValue
                            }
                        </td>
                        <td>
                            @if (audit.NewValue is null)
                            {
                                <text>No value (null)</text>
                            }
                            else if (string.Empty.Equals(audit.NewValue))
                            {
                                <text>No value (empty)</text>
                            }
                            else
                            {
                                @audit.NewValue
                            }
                        </td>
                        <td>
                            @if (audit.UserEmail is null)
                            {
                                <text>No value (null)</text>
                            }
                            else if (string.Empty.Equals(audit.UserEmail))
                            {
                                <text>No value (empty)</text>
                            }
                            else
                            {
                                @audit.UserEmail
                            }
                        </td>
                        <td>
                            @audit.ChangeTimeUtc
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="50">No changes found</td>
                </tr>
            }
            </tbody>
        </table>

    </div>
</div>
